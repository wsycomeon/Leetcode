package com.wsy.leetcode.arrayAndMatrixAndSort.AL_667_constructArray;

public class Official {


    // TODO: 2020-08-06 09:22:22 开始
    // TODO: 2020-08-06 09:30:03 暂有思路：将 k+1 移动到 1之后
    // TODO: 2020-08-06 09:51:38 看完答案
    // TODO: 2020-08-06 10:21:43 代码 整理完毕 ！

    /**
     * 本题要求：构造一个新的数组：
     * 包含 1 -》n的所有元素，并且 相邻元素 差值 的 绝对值的 不同 个数 为指定的 k个
     * <p>
     * 方法1：找 规律
     * <p>
     * 1-》n 的元素，按顺序 从小到大 排列的话，差值 绝对值 只有 1个 不同元素，
     * 而要包含 k个，即 要有 1,2,3。。。k 这么几个不同的差值，就要 打乱顺序
     * <p>
     * 举例：n = 7 , k = 6 = （6 + 1）- 1 ,
     * 即 1 2 3 4 5 6 7，要包含 k=6 这个差值，则 1+6=7 这个元素 要和1 相邻，此时 1 7 2 3 4 5 6
     * 此时，差值（绝对值） 有 6 5 1 ，还缺 4，此时 2 和 6 差值为4，将6 插入2之后，就是 1 7 2 6 3 4 5
     * 差值 就是 6 5 4 3 1，还缺差值2，此时 移动到的最小值是3，把5插入 3之后，就是 1 7 2 6 3 5 4
     * 差值 即 6 5 4 3 2 1
     * <p>
     * 根据，上述规律 可知：
     * 1、要想一个数组内的元素，符合 相邻元素值的差值的 绝对值 有 k个 不同的元素，
     * 只需要 k+1个 不同元素值 即可；
     * 实现方式是：1,2,3,4.。。k，k+1 个元素，依次 从头取一个，从尾部 取一个，放入新数组，即可 满足 k个 不同 差值绝对值的要求
     * <p>
     * 2、然后，将 从 k+2 开始 到 n 的元素 按顺序 依次填入 新数组，就满足了 包含 n个不同元素 的要求
     * <p>
     * 3、从前面可知，新数组的大小，也只需要 n 即可
     * <p>
     * 时间：O(n) ，只遍历了 一遍 [1,n] 的 所有元素，插入目标数组
     * 空间：O(1)
     */
    public int[] constructArray(int n, int k) {
        // 目标数组
        int[] a = new int[n];

        // 1、先填充 前面 k+1 个元素，元素取值为 [1 , K+1] ,
        // 使这个区间的元素，满足 相邻元素的差值的绝对值的 不同个数 为 k
        // 具体做法是：min，max，min，max，即 min max 双指针 都 向内，缩小区间
        int min = 1;
        int max = k + 1;
        int index = 0;

        while (min <= max) {
            // 根据 index ，选择 填充 min 还是 max
            if (index % 2 == 0) {
                // 填 min
                a[index] = min;
                min++; // 向右走
            } else {
                // 填 max
                a[index] = max;
                max--; // 向左走
            }

            // 准备填充 下一个位置
            index++;
        }

        // 2、前面的差值个数满足了(已填充了 k+1个元素了)
        // todo 只要 再把 总元素 不同个数为 n 满足 即可，就是 把 [k+2,n]的元素，依次 填入 数组即可
        for (int i = k + 1; i < n; i++) {
            a[i] = i + 1;
        }

        return a;
    }

}
